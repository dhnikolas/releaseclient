package releaseclient

import (
	"testing"
	"context"
	"fmt"
)

const testBuildName = "release-2023.08.07-1"
const testKubeconfig = "YXBpVmVyc2lvbjogdjEKY2x1c3RlcnM6Ci0gY2x1c3RlcjoKICAgIGNlcnRpZmljYXRlLWF1dGhvcml0eS1kYXRhOiBMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VNdmFrTkRRV1ZoWjBGM1NVSkJaMGxDUVVSQlRrSm5hM0ZvYTJsSE9YY3dRa0ZSYzBaQlJFRldUVkpOZDBWUldVUldVVkZFUlhkd2NtUlhTbXdLWTIwMWJHUkhWbnBOUWpSWVJGUkplazFFVFhsT1JFbDVUVlJOZUU5R2IxaEVWRTE2VFVSTmVVMVVTWGxOVkUxNFQwWnZkMFpVUlZSTlFrVkhRVEZWUlFwQmVFMUxZVE5XYVZwWVNuVmFXRkpzWTNwRFEwRlRTWGRFVVZsS1MyOWFTV2gyWTA1QlVVVkNRbEZCUkdkblJWQkJSRU5EUVZGdlEyZG5SVUpCVG00M0NsVlJjMjlxY0hwelFUZEVkbGRhWjJSTldrNXZVbEZEVEU5clkzTXZVV0UzYTAxWVYwaE9kM0JNYVU1V2JHeEZVbGxPV210cU0wSnBlbEZHYTNCNVV6TUtOMnAxTDAxeWFTOXVVM0Y2ZG1OTFprTjBXWEpVWWxSc1owNHdaR0Z2Y0dWSWFUTTJjV0Z3ZVdOM2VqRXpiM055VldkSlYzTkNVR3dyYVdacmFtY3ZTZ3B4YjNVMVRIUkxWMFo2Y0hkdmNuRjNZMFJrZDJaRVlXZFRSWEkyZUZBclNGaHNOMlpvWVROc1RtczVXRGxsTmt4c2JHeEZaMHRPVUdWTFRERjNOR05MQ2tzdk1qVnRaVm96YXl0TVMwUkZXVFF3TW1Wc1kzRXZlSFF3TWxsV2JHZDBVbVpUTHpnd2FUUlRkbll6VkVSMmJIQmxVMHQ2ZWt0MWQxcE1WR1IzUzFvS1FrUktWVFkwWVRoaE1FVm9WR2xyT1V4aVFXdHVNREJoS3pCSWJITTRlRzg1VkVsTmRYUkpZMk5aWTNCTWVteEVlbFIzTDB0NE1FZEdSR05GUldGSlpncDFSbXB4V2sxM1FVWkxka2x3ZGsxMlduUkZRMEYzUlVGQllVNWFUVVpqZDBSbldVUldVakJRUVZGSUwwSkJVVVJCWjB0clRVRTRSMEV4VldSRmQwVkNDaTkzVVVaTlFVMUNRV1k0ZDBoUldVUldVakJQUWtKWlJVWkRZbHAzVGsxWFFuTjRlbUUxZUVVMFZUUkZXamR1ZUc0NWJEVk5RbFZIUVRGVlpFVlJVVThLVFVGNVEwTnRkREZaYlZaNVltMVdNRnBZVFhkRVVWbEtTMjlhU1doMlkwNUJVVVZNUWxGQlJHZG5SVUpCUVdFd2VVUXJNM1UwZDFsUU56SmhUVGh1VVFwU2IwcHBVbUp1WXpFM0swRlNXRkpDT1V0a1MyVnNUbFV2YkRKWU5IUTFUVkUyUVdOaWNFSjBNemh4Y25NeUwwTnBiMU5KVjNrMFZsVkxaMk5TZEhKd0NsSjVaRlJwZDFkaFlqUXlPRTFJZDJkMVptRlZiV05tU21ZNWFEVTJOU3RJZWpRMGFYVjZhWFJCVkhCSVoxcFBRVWR5TkhSTlRtUlVXVVZMVkd0aFZUUUtVa0ZTYUZkdE1rTnZjbGQyYzJWQk0zWjBWRUV5Unl0cVNVd3dWVUZWWVN0TGJqSkJZV2cwTVZwWFZFOXNaRzV3VEV0Q2VFOVBjakZLYzNka2VqTnVjZ3BzUm1Sc09XMTZaMkphY0VsMU5YWklORkpyVlRNd2JEZEpabTVwTnl0dE9XVTFVVzAxTlRCdlJXSmpkWEZVUm5CSlpYQkhNblJHTURNdk1FTlZSSFp2Q21kYVprUk1TVXhOVTFwdlpreHRaRE5HUTFrMlMwcHBVRzUxUTJoUlRYSlJZVFoxYWxBeFR6RlNhazVNY201dVluTnJVMVpGYVZabFdVeEtha05xYW04S2QyRnJQUW90TFMwdExVVk9SQ0JEUlZKVVNVWkpRMEZVUlMwdExTMHRDZz09CiAgICBzZXJ2ZXI6IGh0dHBzOi8vMTI3LjAuMC4xOjUyMDAxCiAgbmFtZToga2luZC1raW5kCmNvbnRleHRzOgotIGNvbnRleHQ6CiAgICBjbHVzdGVyOiBraW5kLWtpbmQKICAgIHVzZXI6IGtpbmQta2luZAogIG5hbWU6IGtpbmQta2luZApjdXJyZW50LWNvbnRleHQ6IGtpbmQta2luZApraW5kOiBDb25maWcKcHJlZmVyZW5jZXM6IHt9CnVzZXJzOgotIG5hbWU6IGtpbmQta2luZAogIHVzZXI6CiAgICBjbGllbnQtY2VydGlmaWNhdGUtZGF0YTogTFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2sxSlNVUkpWRU5EUVdkdFowRjNTVUpCWjBsSll6VmlVWEZ5UWt4Q2RHTjNSRkZaU2t0dldrbG9kbU5PUVZGRlRFSlJRWGRHVkVWVVRVSkZSMEV4VlVVS1FYaE5TMkV6Vm1sYVdFcDFXbGhTYkdONlFXVkdkekI1VFhwQmVrMXFVWGxOYWtWNlRWUm9ZVVozTUhsT1JFRjZUV3BOZVUxcVJYcE5WR3hoVFVSUmVBcEdla0ZXUW1kT1ZrSkJiMVJFYms0MVl6TlNiR0pVY0hSWldFNHdXbGhLZWsxU2EzZEdkMWxFVmxGUlJFVjRRbkprVjBwc1kyMDFiR1JIVm5wTVYwWnJDbUpYYkhWTlNVbENTV3BCVGtKbmEzRm9hMmxIT1hjd1FrRlJSVVpCUVU5RFFWRTRRVTFKU1VKRFowdERRVkZGUVhsVE1GTm5helprUTAwcmFWRnZaVVlLWTNCMFNHTXhSVTloY2taQlRsRXlabGQ2YUdWdWRXRjFkM3B4TjNvNVJtUlZVMHBJY0ZGRmFHSm9ORVZaYjFwcmJtSXhiRlJUUm1ad2MwNVZaSFJLTmdveE9VVm9lVzFVYjNJNWNXTkZMM0JxUTFwYVNWcFhkaTlJY2pKbk1qY3hhVkpWU21aYWNXazRUa3hzUVhkTWNsQTJkV2xQWTJoeVkxSk5NM0V3WW05S0NqZG9aMVpCWlZKMmRYQnFTM2xNVWtaTVdtRnhkVlZ6VW5WSllrOTBPVmxtTkdwQ1dWRmFWM1puUlhWbVRFWlhRbUV4VTFGd1dHWkRiRUZHTDFaeGJuQUtWa2x4TURCVFdtTlphRGdyU1RkaFVFOW9aM2xQT1dKU09URktRalYwTVRJNU9DdFdaMVV3U0VSc05FVkRZa0kyZDBoRWVtSXJhMEZXWWxkRWRIZEdid3BQUjFoWGVHdEVZVk5SVUUxckt5dEllQzlPT1daQ1NqUk9UMHRZSzI1bWRHWmxaelZwVTJsVFJscDBTRFY1ZEZWWmQxUlRjSGR0U210SWVrSnFTWEFyQ2sxeUswSlFVVWxFUVZGQlFtOHhXWGRXUkVGUFFtZE9Wa2hST0VKQlpqaEZRa0ZOUTBKaFFYZEZkMWxFVmxJd2JFSkJkM2REWjFsSlMzZFpRa0pSVlVnS1FYZEpkMFJCV1VSV1VqQlVRVkZJTDBKQlNYZEJSRUZtUW1kT1ZraFRUVVZIUkVGWFowSlJiVEpqUkZSR1oySk5ZekoxWTFKUFJrOUNSMlUxT0ZvdldncGxWRUZPUW1kcmNXaHJhVWM1ZHpCQ1FWRnpSa0ZCVDBOQlVVVkJSa0pOYlV0TlpIRTVSelJOV21WVk9UZHZhV0V6ZUVRMmNqYzVXbWQ1WW1SV05ISXlDbUU0T0RVclZsbDFWQ3RNVFNzMWF6UXZXR2RNWTJsV2NITTRhMGhDV1ZSVWRtNWFhVGRaZEhOdk0zVk5lbEV6UVZoblRFOXNZVXQzVlZVMmRYaEdhV0lLTkZWemRFMW1hR0pYUms5bmNtVXdkVGRvWkVzeWJuQlhSVzVHWkZRd2MwdDVOMFpRZFZrM1dIZDFVV2hqUlRFNVVXTnlkMFJvU3pNek1rRk1hV3hMT0FwNmJIVlpSMUZRV201clQyMVRlV1J3Tmt3M2VHdGxTQ3N5WVZCeFFWSmxNM2t2UzFJMFltaDFPWHBJUlZGaWVucERPRWhEVTJwaldUQnpjazVYVVZOMENrY3lhbEZvUkhSTWMxaE9Sa1kzZDJGaGFHNTBkbkZuZW1aemFXdGhiek5YUWtsVU5YQXZaR2RXU1ZBd2RUbFVUWGx3UzJWcWFVMW9iM3BvWm5GbFF6VUtVRVpUU2xjdmVWaFNVREZaZFVKMVIycEZaMjh4VkdsMkswSlBVVFJDZUZWS2JqQnZVSGRpZVhBdmMzY3hUM0ZXV0VFOVBRb3RMUzB0TFVWT1JDQkRSVkpVU1VaSlEwRlVSUzB0TFMwdENnPT0KICAgIGNsaWVudC1rZXktZGF0YTogTFMwdExTMUNSVWRKVGlCU1UwRWdVRkpKVmtGVVJTQkxSVmt0TFMwdExRcE5TVWxGYjNkSlFrRkJTME5CVVVWQmVWTXdVMmRyTm1SRFRTdHBVVzlsUm1Od2RFaGpNVVZQWVhKR1FVNVJNbVpYZW1obGJuVmhkWGQ2Y1RkNk9VWmtDbFZUU2tod1VVVm9ZbWcwUlZsdldtdHVZakZzVkZOR1puQnpUbFZrZEVvMk1UbEZhSGx0Vkc5eU9YRmpSUzl3YWtOYVdrbGFWM1l2U0hJeVp6STNNV2tLVWxWS1pscHhhVGhPVEd4QmQweHlVRFoxYVU5amFISmpVazB6Y1RCaWIwbzNhR2RXUVdWU2RuVndha3Q1VEZKR1RGcGhjWFZWYzFKMVNXSlBkRGxaWmdvMGFrSlpVVnBYZG1kRmRXWk1SbGRDWVRGVFVYQllaa05zUVVZdlZuRnVjRlpKY1RBd1UxcGpXV2c0SzBrM1lWQlBhR2Q1VHpsaVVqa3hTa0kxZERFeUNqazRLMVpuVlRCSVJHdzBSVU5pUWpaM1NFUjZZaXRyUVZaaVYwUjBkMFp2VDBkWVYzaHJSR0ZUVVZCTmF5c3JTSGd2VGpsbVFrbzBUazlMV0N0dVpuUUtabVZuTldsVGFWTkdXblJJTlhsMFZWbDNWRk53ZDIxS2EwaDZRbXBKY0N0TmNpdENVRkZKUkVGUlFVSkJiMGxDUVVKU2FFazBTR1F3ZEhscmNFRjRXQXBVUkZvMk9HNWpSa2hCTDBVeWRuUkZORkZNVG5GQ1FYa3dSSFJ2ZUUxUVpITnlWbGxaY1dWa1oweFNNa0l2TW5aSVduYzFTbTU2TUhnMGNrOVBUVEE0Q25Jd1RWUndXR1Z4VmpCUlVsRnJVbTR4WjJGUWJXTXZhMkU1YWtOWWRuaEVjVU5RWVVGSE5GYzBPVWd6Wm1zM1NETmxOSFpHZEdOTFZEUjNUWHBDTDI4S01UYzJkRFE1Y205UFJWWlFNbmxOVURFdk5IaFRRMUY2VEZveGFYQkphVE5tVkRjNFEwMVVOR2cxU21wa1VGQmtlaXRhUW1GU2MwYzNkV3hrT0d0V1R3cDRSbUZTWkdSRGQxVTNhMlk0Y2pSc2VYcHlXa0ZMYUhaUmVpOVdja2QxZUhaRGRHaG9SbWhoTTFCRGRXZFNXRFpzU2xOQlJXNXhUVTV0VlZOd2MwMWlDbE5OZW1OSllqTk9RUzlqVUVwNFFsVmpWV04xZVRoUE9XaFlhRXd4ZEd0S2FWTkhhMnBFZVZvemJ5dFlLMUJ2YUU1M1NVc3lRelUxVVdjdmMxTmpUelFLUkVoNVZITlRSVU5uV1VWQk1HRnJObkJEU3pKcVZXMDRjRTVWVjNoaE1IQlFOVUZNVkcxeFFVWmFVbTlWZGtaTU9XWmtkMlJQWXpJM1lteFNWbHBsY2dveE1YVTJSSEpvVTBab05sSmlNMnAzTlhRM1YyTjRPRTlETDJoUGVuSmxLMFZCVEVONlFXWlVaRmRqTWtJNWJHeFJXVFV5VTBWQldVSktVMFpyVFhadUNrUkJTbXBEYlZwbldFVnRWWFJPTTBoSVRuUjBaRTEzVDNsUlNHOXhLMHRFUjJFMmVVcHFlWGhEWlVzcmQxRlRRV1l5SzI1VmRtdERaMWxGUVRsaFVFSUtjM0ZQWmpWck5sbHhaME5CUWpCemNVY3hOeXQ1VVRkUmJFRnVZMWNyVW1neU9UUm9NVTF1VUV4cFIwMWFiV000U1hwMlMwdG9ZekF5V0RkbVltTlpTQXBIVUVaUGJVRnJUV1JMTnpSeFRqSndjVGxRUVVGbk5UZHBWVTB5WVRCR2QzRkxOME5LWmpKTkt5OVJiWE53UkhwTVRXSldaVlpzZGxKelVYaFNVMHh6Q2sxT0sydzJMM2wxYm5aUFdWaGtjMEpSYkZKUlltRndLMGhPWld0MEx5OTBObTFFVjB4WFZVTm5XVUZzTTFkYVZqRnNPRnA2VlU1bmExbDBNMVF2Y1hZS1NFSnBkWEJPVmxaRlIxSXlPV3hWT1hGME5rbG1iVzFTVEZoTVpTOXVSblZvTkZwdGRXbHpOVU16VWtGeFduSTBWbmsxY25oRFVVcFVWMDFQVDIxcU9RcEJNRXRxUkhCaVIwVlZibFY1VWtwalkwcHZNRWRxT0RoT1NXRmhlUzlwUTFaeWQwVlhUa1F5VjJWUFpHUnhRa3hQWlZobGRtbDFPV0ZpWWxoMFExUjRDazF1WmtOTFFuWm9TMU0xUTA1amJuWlBaamhEU1ZGTFFtZFJRMHhYTnpGbWJVNDNNWEpYSzBaUE1GWnVXR1ZvYTI5UE9WSndMM05FYTJScFdIUmhhMm9LVFZKSWJXaENkbkpaZUUxb1dXSTFTR2wyY3pKQ0wxcDFNR3RFTWt0V2QweGtXazlQVVRoMmVWRjJXa1kzTkZBNFVFOVVOVUppYUcxa2JVSm5Wbm80VVFwS1FqRXpjV3BMWWtkeVpqbHdTMmxvY0dGcGF6aFBNV3h4TldJNFZEQlVTM05aWlZSeE9GcDRNMWRrTjBRck0xWTRURzB3YW1ZMlFWcEpUa281U1ZCSkNqZGxiREF4VVV0Q1owZExZMVJzVUhkc2FtSmtUVVZuZUVkUmRDOU5RVzVaVG1wcFpYWktVa1JuWTBGNWMybE1jVkJRTDJ0NE9IVTNUM1JtWW1WU2Jqa0tSRnBPZG1Sb2FGWTNSMDA0TjBwSFpYQktWM1Z0U25saWNXSm5aRkZsVVZwU1Z6UkpNekJZTlhncmJURTBSVkZVWm1GM0wyeHJjRUpGV0ZSVEswSkxWZ293ZURkRFVHSlpURWxOV1c4eWQyeFNVQzlEWnpkQ1lYZEpXakJ2U1ZkMWNVZ3JabEpxZVhZMmFVdFNXWHBHZFZOblRXTTNDaTB0TFMwdFJVNUVJRkpUUVNCUVVrbFdRVlJGSUV0RldTMHRMUzB0Q2c9PQo="

func TestToRepo(t *testing.T) {
	tasks := []Task{
		{
			BranchName: "branch1",
			Services:   []string{"github.com/dhnikolas/test"},
		},
		{
			BranchName: "branch2",
			Services:   []string{"github.com/dhnikolas/test"},
		},
		{
			BranchName: "branch3",
			Services:   []string{"github.com/dhnikolas/test", "github.com/dhnikolas/test2"},
		},
	}
	repos := taskToRepo(tasks)
	if len(repos) != 2 {
		t.Errorf("Repo count error")
	}
	if len(repos[0].Branches) != 3 {
		t.Errorf("Repo %s must have %d branches", repos[0].URL, 3)
	}
	if repos[0].Branches[2].Name != "branch3" {
		t.Errorf("Repo %s must have branch %s", repos[0].URL, "branch3")
	}
}

func TestReleaseClient_ApplyBuild(t *testing.T) {
	c, err := createClient()
	if err != nil {
		t.Error(err)
	}

	tl := []Task{
		{
			BranchName: "branch3",
			Services:   []string{"https://scm.x5.ru/dis.cloud/examples/test-runners"},
		},
		{
			BranchName: "branch2",
			Services:   []string{"https://scm.x5.ru/dis.cloud/examples/test-runners"},
		},
	}
	err = c.ApplyBuild(context.Background(), testBuildName, tl)
	if err != nil {
		t.Error(err)
	}

}

func TestReleaseClient_GetBuildInfo(t *testing.T) {
	c, err := createClient()
	if err != nil {
		t.Error(err)
	}

	bs, err := c.GetBuildInfo(context.Background(), testBuildName)
	if err != nil {
		t.Error(err)
	}

	fmt.Println(bs)
}

func createClient() (*ReleaseClient, error) {
	c, err := New(testKubeconfig, "default", []string{})
	if err != nil {
		return nil, err
	}

	return c, nil
}
